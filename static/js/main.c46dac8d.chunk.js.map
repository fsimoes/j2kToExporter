{"version":3,"sources":["Main.js","reportWebVitals.js","index.js"],"names":["Paragraph","Typography","Header","Layout","Content","Footer","TextArea","Input","URL_REGEX","Main","props","getChapterFromName","rawChapterName","chapterName","replace","split","splice","onConvert","input","state","jsonInput","JSON","parse","mangas","Error","result","Reading","errorOnImport","success","key","entry","seriesURL","manga","chapters","chapterURL","map","c","u","sort","splitChapterURL","length","slice","test","join","push","chapterNumber","lastRead","setState","stringify","undefined","err","error","onChangeData","e","value","target","this","className","style","padding","message","margin","type","align","height","justify","span","onChange","textAlign","disabled","onClick","copyable","text","ellipsis","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c46dac8d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Input, Button, Layout, Typography, Row, Col, Skeleton, Alert } from \"antd\";\r\nimport \"./Main.css\";\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nconst { Header, Content, Footer } = Layout;\r\nconst { TextArea } = Input;\r\n// eslint-disable-next-line\r\nconst URL_REGEX = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      result: '',\r\n      input: '',\r\n      error: undefined,\r\n      errorOnImport: undefined,\r\n      success: 0,\r\n    }\r\n\r\n  }\r\n\r\n\r\n  getChapterFromName = (rawChapterName) => {\r\n    let chapterName = rawChapterName.replace('.html', '');\r\n    chapterName = chapterName.split('-').splice(-1)[0].split('_').splice(-1)[0];\r\n    return chapterName;\r\n  }\r\n\r\n  onConvert = () => {\r\n    const { input } = this.state;\r\n    try {\r\n      const jsonInput = JSON.parse(input);\r\n\r\n      if (!jsonInput || !jsonInput.mangas) {\r\n        throw Error(\"Incorrect J2K format\");\r\n      }\r\n\r\n      const result = {\r\n        Reading: [],\r\n        \"On-Hold\": [],\r\n      }\r\n\r\n      const { mangas } = jsonInput;\r\n      const errorOnImport = [];\r\n      let success = 0;\r\n      for (const key in mangas) {\r\n        const entry = mangas[key]\r\n        let seriesURL = entry.manga[0];\r\n\r\n        if (!entry.chapters) {\r\n          errorOnImport.push(entry.manga[1])\r\n        } else {\r\n          let chapterList = entry.chapters.map(c => c.u).sort();\r\n          let chapterURL = chapterList[0].split('?')[0];\r\n          chapterURL = chapterURL[chapterURL.length - 1] === '/' ? chapterURL.slice(0, -1) : chapterURL\r\n\r\n          const splitChapterURL = chapterURL.split('/')\r\n          seriesURL = URL_REGEX.test(seriesURL) ? seriesURL : splitChapterURL.slice(0, -1).join('/')\r\n\r\n          if (URL_REGEX.test(seriesURL) === false){\r\n            errorOnImport.push(entry.manga[1])\r\n          }\r\n          else {\r\n            const chapterName = splitChapterURL.splice(-1)[0];\r\n            const chapterNumber = this.getChapterFromName(chapterName);\r\n            const lastRead = `c${chapterNumber}`;\r\n            success++\r\n            result.Reading.push({\r\n              seriesURL,\r\n              chapterURL,\r\n              lastRead,\r\n            });\r\n          }\r\n        }\r\n      };\r\n\r\n      this.setState({\r\n        result: JSON.stringify(result, null, 4),\r\n        errorOnImport: errorOnImport.length > 0 ? errorOnImport : undefined,\r\n        success,\r\n      })\r\n    }\r\n    catch (err) {\r\n      this.setState({\r\n        error: `Error Parsing the json: ${err}`,\r\n        result: undefined,\r\n        errorOnImport: undefined,\r\n        success: 0,\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  onChangeData = (e) => {\r\n    const { input } = this.state;\r\n    const { target: { value } } = e\r\n    if (input !== value) {\r\n      this.setState({\r\n        input: value, \r\n        error: undefined,\r\n        errorOnImport: undefined,\r\n        success: 0,\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { input, result, error, errorOnImport, success } = this.state;\r\n    return (\r\n      <Layout className=\"layout\">\r\n        <Header>\r\n          <h2 className=\"title\">J2k Exporter</h2>\r\n        </Header>\r\n        <Content style={{ padding: '0 50px' }}>\r\n          <div className=\"site-layout-content\">\r\n            {error && <Alert message={error} style={{ margin: 20 }} type=\"error\" />}\r\n            <Row align=\"top\" style={{ height: \"100%\" }} justify=\"center\">\r\n              <Col style={{ height: \"80%\" }} span={8}>\r\n                <h3>Paste your J2k backup here</h3>\r\n                <TextArea value={input} onChange={this.onChangeData} style={{ height: \"100%\" }} />\r\n              </Col>\r\n              <Col style={{ textAlign: 'center' }} span={8}>\r\n                <Button disabled={input === ''} type=\"primary\" onClick={this.onConvert}>Convert</Button>\r\n              </Col>\r\n              <Col span={8}>\r\n                <h3>Results</h3>\r\n                {result ? <>\r\n                  <Paragraph copyable={{\r\n                   text: result\r\n                  }}>\r\n                    {result.length > 1000 ? `Click To Copy the result (${success})` : result}\r\n                    \r\n                  </Paragraph>\r\n                  {errorOnImport && errorOnImport.length > 0 &&\r\n                    <Paragraph\r\n                      copyable={{\r\n                        text: errorOnImport.join('\\n')\r\n                      }}\r\n                      ellipsis>\r\n                    {`Click to copy the failed list (${errorOnImport.length+1})`}\r\n                    </Paragraph>\r\n                  }\r\n                </>\r\n                  : <Skeleton />}\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}> Â©2020 Created by fdssimoes</Footer>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\n import 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
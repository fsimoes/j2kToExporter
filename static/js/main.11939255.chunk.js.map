{"version":3,"sources":["constants.js","Main.js","reportWebVitals.js","index.js"],"names":["SourceMap","arangscans","bacamanga","bangaqua","thecatscans","chibimanga","deathtollscans","disasterscans","dm5","dokireader","dokusha","dynastyscans","earlymanga","easygoing","edelgardescans","elpsykongroo","evilflowers","fallenangels","forgottenscans","funmanga","gekkouscans","gufengmh8","hastareader","hatigarmscans","helveticascans","heromanhua","hunlightscans","isekaiscans","itascan","jaiminisbox","kangaryuteam","kireicake","kiryuu","kkjscans","komikav","komicast","komikgo","komikgue","komikid","komikindo","komikstation","komiku","letitgoscans","leviatanscans","lhtranslations","loveheaven","manga4life","mangachan","mangadex3mangasinlist","mangadods","mangahasu","mangahere","mangahost","mangahub","mangaichiscans","mangainn","mangakakalot","mangalib","manganelo","mangapanda","mangareader","mangarock","mangasee","mangashiro","mangastream","mangasushi","mangaturf","mangaturk","mangazukime","mangazuki","mangazukiinfo","manhuaplus","manhuas","manhuaus","manhwaclub","manwha18","manytoon","martialscans","merakiscans","methodscans","mintmanga","naniscans","neumanga","ngomik","niceoppai","nightcomic","ninjascans","thenonames","nonstopscans","onetimescans","pecintakomik","phoenixserenade","pmscans","projecttimescans","readmanga","readmangatoday","readmanhua","reaperscans","roseliascans","scanfr","scantrad","secretscans","sensesscans","shoujohearts","skscans","sorcererweekly","submanga","tappytappytap","toonily","twistedhelscans","ultmanga","unionleitor","vortexscans","webtoons","westmanga","worldthree","yomanga","zeroscans","Paragraph","Typography","Header","Layout","Content","Footer","TextArea","Input","URL_REGEX","Main","props","getChapterFromName","rawChapterName","chapterName","replace","split","splice","onKenmeiConvert","jsonInput","result","Reading","mangas","errorOnImport","success","key","entry","seriesURL","manga","chapters","chapterURL","map","c","u","sort","splitChapterURL","length","slice","test","join","push","chapterNumber","lastRead","onAllMangaConvert","bookmarks","n","l","mirrorList","filter","a","includes","m","hasMap","index","onConvert","e","input","state","JSON","parse","Error","target","innerText","toLowerCase","setState","stringify","undefined","err","error","onChangeData","value","this","className","style","padding","message","margin","type","align","height","justify","span","onChange","textAlign","disabled","onClick","copyable","text","ellipsis","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11939255.chunk.js","sourcesContent":["export const SourceMap = {\r\n    arangscans: 'Arang Scans',\r\n    bacamanga: 'Bacamanga',\r\n    bangaqua: 'Bang Aqua',\r\n    thecatscans: 'The Cat Scans',\r\n    chibimanga: 'ChibiManga',\r\n    deathtollscans: 'Death Toll Scans',\r\n    disasterscans: 'Disaster Scans',\r\n    dm5: 'DM5',\r\n    dokireader: 'Doki Reader',\r\n    dokusha: 'Dokusha',\r\n    dynastyscans: 'Dynasty Scans',\r\n    earlymanga: 'EarlyManga',\r\n    easygoing: 'Easy Going',\r\n    edelgardescans: 'Edelgarde Scans',\r\n    elpsykongroo: 'Elpsykongroo',\r\n    evilflowers: 'Evil Flowers',\r\n    fallenangels: 'Fallen Angels',\r\n    forgottenscans: 'Forgotten Scans',\r\n    funmanga: 'FunManga',\r\n    gekkouscans: 'Gekkou Scans',\r\n    gufengmh8: 'GuFengMH8',\r\n    hastareader: 'Hasta Reader',\r\n    hatigarmscans: 'Hatigarm Scans',\r\n    helveticascans: 'Helvetica Scans',\r\n    heromanhua: 'Hero Manhua',\r\n    hunlightscans: 'Hunlight Scans',\r\n    isekaiscans: 'IsekaiScans',\r\n    itascan: 'ItaScan',\r\n    jaiminisbox: 'Jaimini\\'s Box',\r\n    kangaryuteam: 'Kangaryu Team',\r\n    kireicake: 'Kirei Cake',\r\n    kiryuu: 'Kiryuu',\r\n    kkjscans: 'KKJ Scans',\r\n    komikav: 'Komikav',\r\n    komicast: 'Komicast',\r\n    komikgo: 'Komikgo',\r\n    komikgue: 'Komikgue',\r\n    komikid: 'Komikid',\r\n    komikindo: 'Komikindo',\r\n    komikstation: 'Komikstation',\r\n    komiku: 'Komiku',\r\n    letitgoscans: 'Let It Go Scans',\r\n    leviatanscans: 'Leviatan Scans',\r\n    lhtranslations: 'LHTranslations',\r\n    loveheaven: 'Love Heaven',\r\n    manga4life: 'Manga4Life',\r\n    'mangaal-arab': 'Manga Al-arab',\r\n    mangachan: 'Mangachan',\r\n    mangadex3mangasinlist: 'MangaDex 3 mangas in list',\r\n    mangadods: 'Manga Dods',\r\n    'manga-fox': 'Manga-Fox',\r\n    mangahasu: 'Manga Hasu',\r\n    mangahere: 'Manga Here',\r\n    mangahost: 'MangaHost',\r\n    mangahub: 'Manga Hub',\r\n    mangaichiscans: 'Mangaichi Scans',\r\n    mangainn: 'MangaInn',\r\n    mangakakalot: 'Mangakakalot',\r\n    mangalib: 'MangaLib',\r\n    manganelo: 'Manganelo',\r\n    mangapanda: 'Manga Panda',\r\n    mangareader: 'Manga Reader',\r\n    mangarock: 'Manga Rock',\r\n    mangasee: 'MangaSee',\r\n    mangashiro: 'Mangashiro',\r\n    mangastream: 'MangaStream',\r\n    mangasushi: 'Manga Sushi',\r\n    mangaturf: 'Manga Turf',\r\n    mangaturk: 'Manga Turk',\r\n    mangazukime: 'MangazukiMe',\r\n    mangazuki: 'Mangazuki',\r\n    mangazukiinfo: 'MangazukiInfo',\r\n    manhuaplus: 'ManhuaPlus',\r\n    manhuas: 'Manhuas',\r\n    manhuaus: 'Manhuaus',\r\n    manhwaclub: 'ManhwaClub',\r\n    manwha18: 'Manwha 18',\r\n    manytoon: 'Manytoon',\r\n    martialscans: 'Martial Scans',\r\n    merakiscans: 'MerakiScans',\r\n    methodscans: 'Method Scans',\r\n    mintmanga: 'MintManga',\r\n    naniscans: 'Nani Scans',\r\n    neumanga: 'Neumanga',\r\n    ngomik: 'Ngomik',\r\n    niceoppai: 'Niceoppai',\r\n    nightcomic: 'Night Comic',\r\n    ninjascans: 'NinjaScans',\r\n    thenonames: 'The No Names',\r\n    nonstopscans: 'Non Stop Scans',\r\n    onetimescans: 'One Time Scans',\r\n    pecintakomik: 'Pecintakomik',\r\n    phoenixserenade: 'Phoenix Serenade',\r\n    pmscans: 'PM Scans',\r\n    projecttimescans: 'Project Time Scans',\r\n    'readm.org': 'Readm.org',\r\n    readmanga: 'ReadManga',\r\n    readmangatoday: 'ReadMangaToday',\r\n    readmanhua: 'Read Manhua',\r\n    reaperscans: 'Reaper Scans',\r\n    roseliascans: 'Roselia Scans',\r\n    scanfr: 'ScanFR',\r\n    scantrad: 'Scan Trad',\r\n    secretscans: 'Secret Scans',\r\n    sensesscans: 'Senses Scans',\r\n    shoujohearts: 'Shoujo Hearts',\r\n    skscans: 'SK Scans',\r\n    sorcererweekly: 'Sorcerer Weekly',\r\n    submanga: 'SubManga',\r\n    tappytappytap: 'Tappy tappy tap',\r\n    toonily: 'Toonily',\r\n    twistedhelscans: 'Twisted Hel Scans',\r\n    ultmanga: 'Ult Manga',\r\n    unionleitor: 'Union Leitor',\r\n    vortexscans: 'Vortex Scans',\r\n    webtoons: 'WebToons',\r\n    westmanga: 'Westmanga',\r\n    worldthree: 'World Three',\r\n    yomanga: 'Yomanga',\r\n    zeroscans: 'Zero Scans'\r\n  }","import React, { Component } from \"react\";\r\nimport { Input, Button, Layout, Typography, Row, Col, Skeleton, Alert } from \"antd\";\r\nimport \"./Main.css\";\r\nimport { SourceMap } from './constants';\r\n\r\nconst { Paragraph } = Typography;\r\n\r\nconst { Header, Content, Footer } = Layout;\r\nconst { TextArea } = Input;\r\n// eslint-disable-next-line\r\nconst URL_REGEX = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      result: '',\r\n      input: '',\r\n      error: undefined,\r\n      errorOnImport: undefined,\r\n      success: 0,\r\n    }\r\n\r\n  }\r\n\r\n  getChapterFromName = (rawChapterName) => {\r\n    let chapterName = rawChapterName.replace('.html', '');\r\n    chapterName = chapterName.split('-').splice(-1)[0].split('_').splice(-1)[0];\r\n    return chapterName;\r\n  }\r\n\r\n  onKenmeiConvert = (jsonInput) => {\r\n    const result = {\r\n      Reading: [],\r\n      \"On-Hold\": [],\r\n    }\r\n\r\n    const { mangas } = jsonInput;\r\n    const errorOnImport = [];\r\n    let success = 0;\r\n    for (const key in mangas) {\r\n      const entry = mangas[key]\r\n      let seriesURL = entry.manga[0];\r\n\r\n      if (!entry.chapters) {\r\n        errorOnImport.push(entry.manga[1])\r\n      } else {\r\n        let chapterList = entry.chapters.map(c => c.u).sort();\r\n        let chapterURL = chapterList[0].split('?')[0];\r\n        chapterURL = chapterURL[chapterURL.length - 1] === '/' ? chapterURL.slice(0, -1) : chapterURL\r\n\r\n        const splitChapterURL = chapterURL.split('/')\r\n        seriesURL = URL_REGEX.test(seriesURL) ? seriesURL : splitChapterURL.slice(0, -1).join('/')\r\n\r\n        if (URL_REGEX.test(seriesURL) === false) {\r\n          errorOnImport.push(entry.manga[1])\r\n        }\r\n        else {\r\n          const chapterName = splitChapterURL.splice(-1)[0];\r\n          const chapterNumber = this.getChapterFromName(chapterName);\r\n          const lastRead = `c${chapterNumber}`;\r\n          success++\r\n          result.Reading.push({\r\n            seriesURL,\r\n            chapterURL,\r\n            lastRead,\r\n          });\r\n        }\r\n      }\r\n    };\r\n    return { errorOnImport, success, result }\r\n  }\r\n\r\n  onAllMangaConvert = (jsonInput) => {\r\n    const result = {\r\n      mangas: [\r\n        \r\n      ],\r\n      bookmarks: []\r\n    }\r\n\r\n    const { mangas } = jsonInput;\r\n    const errorOnImport = [];\r\n    let success = 0;\r\n\r\n    for (const key in mangas) {\r\n      const entry = mangas[key]\r\n      let u = entry.manga[0];\r\n      let n = entry.manga[1];\r\n\r\n      if (!entry.chapters) {\r\n        errorOnImport.push(n)\r\n      } else {\r\n        let chapterList = entry.chapters.map(c => c.u).sort();\r\n        let l = chapterList[0].split('?')[0];\r\n        l = l[l.length - 1] === '/' ? l.slice(0, -1) : l\r\n        success++\r\n\r\n        let mirrorList = l.split('/').filter(a => a.includes('.'))[0];\r\n\r\n        if (mirrorList) {\r\n          mirrorList = mirrorList.split('.');\r\n          let m;\r\n          let hasMap = false;\r\n          for (const index in mirrorList) {\r\n            m = SourceMap[mirrorList[index]];\r\n            if(m){\r\n              hasMap = true;\r\n              break;\r\n            }\r\n          }\r\n\r\n          if (hasMap){\r\n            result.mangas.push({\r\n              u,\r\n              n,\r\n              l,\r\n              m,\r\n            });\r\n          }\r\n          else {\r\n          errorOnImport.push(n)\r\n          }\r\n        } else {\r\n          errorOnImport.push(n)\r\n        }\r\n      }\r\n    };\r\n    return { result, success, errorOnImport  }\r\n  }\r\n\r\n  onConvert = (e) => {\r\n    const { input } = this.state;\r\n    try {\r\n      const jsonInput = JSON.parse(input);\r\n\r\n      if (!jsonInput || !jsonInput.mangas) {\r\n        throw Error(\"Incorrect J2K format\");\r\n      }\r\n\r\n      const convertFunction = e.target.innerText.toLowerCase().includes('kenmei') ? this.onKenmeiConvert : this.onAllMangaConvert;\r\n      const { errorOnImport, success, result } = convertFunction(jsonInput);\r\n\r\n      this.setState({\r\n        result: JSON.stringify(result, null, 4),\r\n        errorOnImport: errorOnImport.length > 0 ? errorOnImport : undefined,\r\n        success,\r\n      })\r\n    }\r\n    catch (err) {\r\n      this.setState({\r\n        error: `Error Parsing the json: ${err}`,\r\n        result: undefined,\r\n        errorOnImport: undefined,\r\n        success: 0,\r\n      });\r\n      return;\r\n    }\r\n  }\r\n\r\n  onChangeData = (e) => {\r\n    const { input } = this.state;\r\n    const { target: { value } } = e\r\n    if (input !== value) {\r\n      this.setState({\r\n        input: value, \r\n        error: undefined,\r\n        errorOnImport: undefined,\r\n        success: 0,\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { input, result, error, errorOnImport, success } = this.state;\r\n    return (\r\n      <Layout className=\"layout\">\r\n        <Header>\r\n          <h2 className=\"title\">J2k Exporter</h2>\r\n        </Header>\r\n        <Content style={{ padding: '0 50px' }}>\r\n          <div className=\"site-layout-content\">\r\n            {error && <Alert message={error} style={{ margin: 20 }} type=\"error\" />}\r\n            <Row align=\"top\" style={{ height: \"100%\" }} justify=\"center\">\r\n              <Col style={{ height: \"80%\" }} span={8}>\r\n                <h3>Paste your J2k backup here</h3>\r\n                <TextArea value={input} onChange={this.onChangeData} style={{ height: \"100%\" }} />\r\n              </Col>\r\n              <Col style={{ textAlign: 'center' }} span={8}>\r\n                <Button disabled={input === ''} type=\"primary\" onClick={this.onConvert}>Convert to Kenmei</Button>\r\n                <br />\r\n                <br />\r\n                <Button disabled={input === ''} type=\"primary\" onClick={this.onConvert}>Convert to All Mangas</Button>\r\n              </Col>\r\n              <Col span={8}>\r\n                <h3>Results</h3>\r\n                {result ? <>\r\n                  <Paragraph copyable={{\r\n                   text: result\r\n                  }}>\r\n                    {result.length > 1000 ? `Click To Copy the result (${success})` : result}\r\n                    \r\n                  </Paragraph>\r\n                  {errorOnImport && errorOnImport.length > 0 &&\r\n                    <Paragraph\r\n                      copyable={{\r\n                        text: errorOnImport.join('\\n')\r\n                      }}\r\n                      ellipsis>\r\n                    {`Click to copy the failed list (${errorOnImport.length+1})`}\r\n                    </Paragraph>\r\n                  }\r\n                </>\r\n                  : <Skeleton />}\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </Content>\r\n        <Footer style={{ textAlign: 'center' }}> ©2020 Created by fdssimoes</Footer>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Main;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './Main';\nimport reportWebVitals from './reportWebVitals';\n import 'antd/dist/antd.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}